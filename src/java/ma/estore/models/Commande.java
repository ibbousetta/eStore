package ma.estore.models;
// Generated 22 avr. 2020 11:12:31 by Hibernate Tools 4.3.1


import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

/**
 * Commande generated by hbm2java
 */
@Entity
@Table(name="COMMANDE"
    ,schema="ESTORE"
)
@SequenceGenerator(name = "seq_cmd",sequenceName = "seq_cmd")
public class Commande  implements java.io.Serializable {


     private int idcmd;
     private Client client;
     private Expedition expedition;
     private Adresse adresse;
     private Date datecmd;
     private String methodePay;
     private String etat;
     private List<Lignecommande> lignecommandes = new ArrayList<Lignecommande>(0);
     private Set<Commentaire> commentaires = new HashSet<Commentaire>(0);

    public Commande() {
    }

	
    public Commande(int idcmd) {
        this.idcmd = idcmd;
    }
    public Commande(int idcmd, Client client, Expedition expedition, Adresse adresse, Date datecmd, String methodePay, String etat, List<Lignecommande> lignecommandes, Set<Commentaire> commentaires) {
       this.idcmd = idcmd;
       this.client = client;
       this.expedition = expedition;
       this.adresse = adresse;
       this.datecmd = datecmd;
       this.methodePay = methodePay;
       this.etat = etat;
       this.lignecommandes = lignecommandes;
       this.commentaires = commentaires;
    }
   
     @Id 

    @GeneratedValue(generator = "seq_cmd",strategy = GenerationType.SEQUENCE)
    @Column(name="IDCMD", unique=true, nullable=false, precision=10, scale=0)
    public int getIdcmd() {
        return this.idcmd;
    }
    
    public void setIdcmd(int idcmd) {
        this.idcmd = idcmd;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="IDC")
    public Client getClient() {
        return this.client;
    }
    
    public void setClient(Client client) {
        this.client = client;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="IDEXP")
    public Expedition getExpedition() {
        return this.expedition;
    }
    
    public void setExpedition(Expedition expedition) {
        this.expedition = expedition;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="IDA")
    public Adresse getAdresse() {
        return this.adresse;
    }
    
    public void setAdresse(Adresse adresse) {
        this.adresse = adresse;
    }

    @Temporal(TemporalType.DATE)
    @Column(name="DATECMD", length=7)
    public Date getDatecmd() {
        return this.datecmd;
    }
    
    public void setDatecmd(Date datecmd) {
        this.datecmd = datecmd;
    }

    
    @Column(name="METHODE_PAY", length=30)
    public String getMethodePay() {
        return this.methodePay;
    }
    
    public void setMethodePay(String methodePay) {
        this.methodePay = methodePay;
    }

    
    @Column(name="ETAT", length=30)
    public String getEtat() {
        return this.etat;
    }
    
    public void setEtat(String etat) {
        this.etat = etat;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="commande")
    public List<Lignecommande> getLignecommandes() {
        return this.lignecommandes;
    }
    
    public void setLignecommandes(List<Lignecommande> lignecommandes) {
        this.lignecommandes = lignecommandes;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="commande")
    public Set<Commentaire> getCommentaires() {
        return this.commentaires;
    }
    
    public void setCommentaires(Set<Commentaire> commentaires) {
        this.commentaires = commentaires;
    }


public float total(){
    float tot=0;
    for(Lignecommande lc:lignecommandes){
        tot+=lc.getProduit().getPrix()*lc.getQte();
    }
    
    return tot;
}

}


